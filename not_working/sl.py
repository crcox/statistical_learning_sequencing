#!/usr/bin env python

####### STATISTICAL LEARNING PARADIGM CREATION #######

import numpy as np

def generate_index(total_length, n):
    '''
    Generate a statistical learning compliant sequence.

    Parameters
    ----------
    total_length: int
    Number of total presentations

    n: int
    numer of syllables
    '''

    if total_length % n !=0:
       raise ValueError('Your total presentation must be a factor of your syllables')
    
    list_indx  = [for i in range(n)]
    indx_vals = list(range(n))

    return list_indx, indx_vals


t, x = generate_index(total_length=100, n=4)

def eval_individual_repeats(list_indx, indx_vals):
    '''
    Function that checks if singles indices immediately repeat

    Parameters
    ----------
    list_indx: list, int
    List of integers generated by `generated_index()`

    '''

    # set replacement value
    r = np.max(indx_vals) + 1

    print(f'Your replacement value is {r}.')

    # for i in t:
    #     if t[i + 1] == t[i]:
    #         t[i + 1] == r

    new_t = [t[i] if t[i] != t[i + 1] else r for i in range(len(t) - 1)] + [t[-1]]

    r_total = list_indx.count(r)

    return(list_indx)

















    # check for repeats
    for i, v in enumerate(list_indx):
        if list_indx[i + 1] == list_indx[i]:
            list_indx[i + 1] == np.random.choice(indx_vals)

    # check for equal counts
    count_checker = []
    count_logic = True
    for i in indx_vals:
       count_checker.append( list_indx.count(indx_vals[i]))
       if sum(count_checker) != len(list_indx):
           count_logic = False




    logic = True
    for i in list_indx:
        if list_indx[i + 1] == list_indx[i] and sum(list_indx.count([indx_vals(j) for j in indx_vals])):
            


           




def check_index(list_indx, p_type):
    '''
    Wrapper function that checks that the list follows one of the following parameters:
    1) Does not repeat indices (i.e., you CANNOT have [1, 3, 2, 4, 4, 1, 3, 2])
                                                                   ^ 
    2) Three or more indices repeated more than 3 times

    Parameters
    ----------
    list_indx: list, int
    List of integers generated by `generated_index()`

    p_type: 1 or 2
    Choose which parameter you wish to confirm

    '''


def 

    

    

    